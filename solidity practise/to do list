// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
// Insert update, read from array of structs

contract TodoList {
    struct Todo{
        string text;
        bool completed;
    }
    Todo[] public todos;  //以Todo[]为结构定义一个todos（数组）。每个todos中的元素是一个元组（“text”， <真值>)

    function create(string calldata _text) external {
        todos.push(
            Todo({
            text:_text,
            completed: false
        })//初始化Todo
        );
    }
    function updateText (uint _index, string calldata _text) external {
        todos[_index].text = _text;

    }//index 用来标识序号， todos（数组名）[序号].text(选取的struct中的要素） = _text(特定的序号位置的元素）
    function get (uint _index) external view returns (string memory, bool){
        //storage  - 29397
        //memory - 29480  一般情况下storage 的gas费更高，可是此处，memory copy了两次。
        Todo memory todo = todos[_index];//宣称一个todo，作为todos数组中的一个个例
        return(todo.text, todo.completed);
    }
    function toggleCompleted(uint _index) external {
        todos[_index].completed = !todos[_index].completed;
    }//注意语义的理解，这里的意思是，某个计划事项如果做完了，应该如何标识。 但是还可以变回去

}
