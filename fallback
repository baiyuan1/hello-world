// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
// fallback executed when function doesn't exist          \directly send eth
/*fallback() or receive ()?
            |
        is msg.data empty?
            /  \   
          yes   no
         /          \
receive() exists?    fallback()
         /\
    yes    no
    /       \
  receive()   fallback()

  这个函数是为 制作eth钱包做准备。

           */
             
contract Fallback {
    event log(string func, address sender, uint value, bytes data);
    //此处宣称一个event 名为log， 定义了四个log，
    
    fallback() external payable{
        emit log("fallback",msg.sender, msg.value, msg.data);
    }//关于msg.value的解释：https://ethereum.stackexchange.com/questions/43362/what-is-msg-value
    //msg.value is automatically set to the amount of ether sent with that payable function.
    //https://docs.soliditylang.org/en/develop/units-and-global-variables.html?highlight=msg.value#block-and-transaction-properties
    /*blockhash(uint blockNumber) returns (bytes32): hash of the given block when blocknumber is one of the 256 most recent blocks; otherwise returns zero

block.basefee (uint): current block’s base fee (EIP-3198 and EIP-1559)
block.chainid (uint): current chain id
block.coinbase (address payable): current block miner’s address
block.difficulty (uint): current block difficulty
block.gaslimit (uint): current block gaslimit
block.number (uint): current block number
block.timestamp (uint): current block timestamp as seconds since unix epoch
gasleft() returns (uint256): remaining gas
msg.data (bytes calldata): complete calldata
msg.sender (address): sender of the message (current call)
msg.sig (bytes4): first four bytes of the calldata (i.e. function identifier)
msg.value (uint): number of wei sent with the message
tx.gasprice (uint): gas price of the transaction
tx.origin (address): sender of the transaction (full call chain)*/
    
    receive() external payable {
        emit log ("receive", msg.sender, msg.value, "");
    }
    
    
    }
